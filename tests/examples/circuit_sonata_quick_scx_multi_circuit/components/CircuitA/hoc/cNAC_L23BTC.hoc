/*
Created by BluePyOpt(1.9.111) at 2021-03-24 17:24:59.394171
*/
{load_file("stdrun.hoc")}
{load_file("import3d.hoc")}
/*
 * Check that global parameters are the same as with the optimization
 */
proc check_parameter(/* name, expected_value, value */){
  strdef error
  if($2 != $3){
    sprint(error, "Parameter %s has different value %f != %f", $s1, $2, $3)
    execerror(error)
  }
}
proc check_simulator() {
  check_parameter("v_init", -80, v_init)
  check_parameter("celsius", 34, celsius)
}

strdef cNAC_L23BTC_NeededAttributes
cNAC_L23BTC_NeededAttributes="AIS_scaler"

begintemplate cNAC_L23BTC
  public init, morphology, geom_nseg_fixed, geom_nsec, getCell, getCCell, setCCell, gid, getCell
  public channel_seed, channel_seed_set
  public connect2target, clear, ASCIIrpt
  public soma, dend, apic, axon, myelin, getThreshold
  create soma[1], dend[1], apic[1], axon[1], myelin[1]
  public nSecAll, nSecSoma, nSecApical, nSecBasal, nSecMyelinated, nSecAxonalOrig, nSecAxonal
  public CellRef, synHelperList, synlist
  objref this, CellRef, segCounts, ASCIIrpt, synHelperList, synlist

  public all, somatic, apical, axonal, basal, myelinated, APC
  objref all, somatic, apical, axonal, basal, myelinated, APC


obfunc getCell(){
        return this
}

obfunc getCCell(){
	return CellRef
}
proc setCCell(){
       CellRef = $o1
}

//-----------------------------------------------------------------------------------------------

/*!
 * When clearing the model, the circular reference between Cells and CCells must be broken so the
 * entity watching reference counts can work.
 */
proc clear() { localobj nil
    CellRef = nil
}



/*!
 * @param $o1 NetCon source (can be nil)
 * @param $o2 Variable where generated NetCon will be placed
 */
proc connect2target() { //$o1 target point process, $o2 returned NetCon
  soma $o2 = new NetCon(&v(1), $o1)
  $o2.threshold = -30
}


proc init(/* args: gid, morphology_dir, morphology_name, AIS_scaler */) {
  all = new SectionList()
  apical = new SectionList()
  axonal = new SectionList()
  basal = new SectionList()
  somatic = new SectionList()
  myelinated = new SectionList()

  synHelperList = new List()                                                     
  synlist = new List()     

  //For compatibility with BBP CCells
  CellRef = this

  forall delete_section()

  gid = $1

  if(numarg() >= 3) {
    load_morphology($s2, $s3)
  } else {
    load_morphology($s2, "C210401C.asc")
  }

  geom_nseg()
  indexSections()
    replace_axon($4, $5)
  insertChannel()
  biophys()

  // Initialize channel_seed_set to avoid accidents
  channel_seed_set = 0
  // Initialize random number generators
  re_init_rng()
}

/*!
 * Assign section indices to the section voltage value.  This will be useful later for serializing
 * the sections into an array.  Note, that once the simulation begins, the voltage values will revert to actual data again.
 *
 * @param $o1 Import3d_GUI object
 */
proc indexSections() { local index
    index = 0
    forsec all {
        v(0.0001) = index
        index = index +1
    }
}

func getThreshold() { return 0.0 }

proc load_morphology(/* morphology_dir, morphology_name */) {localobj morph, import, sf, extension
  strdef morph_path
  sprint(morph_path, "%s/%s", $s1, $s2)

  sf = new StringFunctions()
  extension = new String()

  sscanf(morph_path, "%s", extension.s)
  sf.right(extension.s, sf.len(extension.s)-4)

  if(strcmp(extension.s, ".ASC") == 0 ){
    extension.s = ".asc"
    sf.left(morph_path, sf.len(morph_path)-3)
    sprint(morph_path,"%s%s",morph_path,"asc")
    print "USING LOWERCASE EXTENSION", morph_path
  }


  if( strcmp(extension.s, ".asc") == 0 ) {
    morph = new Import3d_Neurolucida3()
  } else if( strcmp(extension.s, ".swc" ) == 0) {
    morph = new Import3d_SWC_read()
  } else {
    printf(extension.s)
    printf("Unsupported file format: Morphology file has to end with .asc or .swc" )
    quit()
  }

  morph.quiet = 1
  morph.input(morph_path)

  import = new Import3d_GUI(morph, 0)
  import.instantiate(this)
}

/*
 * Assignment of mechanism values based on distance from the soma
 * Matches the BluePyOpt method
 */
proc distribute_distance(){local x localobj sl
  strdef stmp, distfunc, mech

  sl = $o1
  mech = $s2
  distfunc = $s3
  this.soma[0] distance(0, 0.5)
  sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
  forsec sl for(x, 0) {
    sprint(stmp, distfunc, secname(), x, distance(x))
    execute(stmp)
  }
}

proc geom_nseg() {
  this.geom_nsec() //To count all sections
  //TODO: geom_nseg_fixed depends on segCounts which is calculated by
  //  geom_nsec.  Can this be collapsed?
  this.geom_nseg_fixed(40)
  this.geom_nsec() //To count all sections
}

proc insertChannel() {
  forsec this.all {
    insert pas
  }
  forsec this.apical {
    insert CaDynamics_DC0
    insert Ca_HVA2
    insert Ca_LVAst
    insert SK_E2
    insert Ih
  }
  forsec this.axonal {
    insert CaDynamics_DC0
    insert Ca_HVA2
    insert Ca_LVAst
    insert SK_E2
    insert NaTg
    insert SKv3_1
    insert K_Pst
    insert K_Tst
  }
  forsec this.basal {
    insert CaDynamics_DC0
    insert Ca_HVA2
    insert Ca_LVAst
    insert SK_E2
    insert Ih
  }
  forsec this.somatic {
    insert CaDynamics_DC0
    insert Ca_HVA2
    insert Ca_LVAst
    insert SK_E2
    insert NaTg
    insert SKv3_1
    insert K_Pst
    insert K_Tst
    insert Ih
  }
  forsec this.myelinated {
  }
}

proc biophys() {
  
  forsec CellRef.all {
    Ra = 100
    g_pas = 9.6405555657554714e-05
    e_pas = -68.267631598482453
  }
  
  forsec CellRef.apical {
    cm = 1
    gCa_HVAbar_Ca_HVA2 = 0.0002027255442792295
    gCa_LVAstbar_Ca_LVAst = 0.0024934102069671337
    ek = -90
    gSK_E2bar_SK_E2 = 0.089567598706038934
  }
  
  forsec CellRef.axonal {
    cm = 1
    ena = 50
    ek = -90
    vshifth_NaTg = 10
    slopem_NaTg = 9
    gNaTgbar_NaTg = 0.34837428590006625
    gK_Pstbar_K_Pst = 0.15588711204973815
    gK_Tstbar_K_Tst = 0.15398555894030755
    gSKv3_1bar_SKv3_1 = 0.30571121307742627
    gCa_HVAbar_Ca_HVA2 = 0.00046870518659041757
    gCa_LVAstbar_Ca_LVAst = 0.0067315005034645657
    gamma_CaDynamics_DC0 = 0.041982159142606626
    decay_CaDynamics_DC0 = 817.84477287324989
    gSK_E2bar_SK_E2 = 0.00059400661146199172
  }
  
  forsec CellRef.basal {
    cm = 1
    gCa_HVAbar_Ca_HVA2 = 0.0002027255442792295
    gCa_LVAstbar_Ca_LVAst = 0.0024934102069671337
    ek = -90
    gSK_E2bar_SK_E2 = 0.089567598706038934
  }
  
  forsec CellRef.somatic {
    cm = 1
    gCa_HVAbar_Ca_HVA2 = 0.0002027255442792295
    gCa_LVAstbar_Ca_LVAst = 0.0024934102069671337
    ena = 50
    ek = -90
    vshiftm_NaTg = 13
    vshifth_NaTg = 15
    slopem_NaTg = 7
    gNaTgbar_NaTg = 0.0035191258543035009
    gK_Pstbar_K_Pst = 0.045475215219949017
    gK_Tstbar_K_Tst = 0.06159569048115842
    gSKv3_1bar_SKv3_1 = 0.83618689035559357
    gamma_CaDynamics_DC0 = 0.043527223753896838
    decay_CaDynamics_DC0 = 232.97859686599458
    gSK_E2bar_SK_E2 = 0.076507403490437706
  }
  
  forsec CellRef.myelinated {
    cm = 0.02
  }
  
  distribute_distance(CellRef.apical, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*3.3093077584350588e-06")
  distribute_distance(CellRef.basal, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*3.3093077584350588e-06")
  distribute_distance(CellRef.somatic, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*3.3093077584350588e-06")
}

func sec_count(/* SectionList */) { local nSec
  nSec = 0
  forsec $o1 {
      nSec += 1
  }
  return nSec
}

/*
 * Iterate over the section and compute how many segments should be allocate to
 * each.
 */
proc geom_nseg_fixed(/* chunkSize */) { local secIndex, chunkSize
  chunkSize = $1
  soma area(.5) // make sure diam reflects 3d points
  secIndex = 0
  forsec all {
    nseg = 1 + 2*int(L/chunkSize)
    segCounts.x[secIndex] = nseg
    secIndex += 1
  }
}

/*
 * Count up the number of sections
 */
proc geom_nsec() { local nSec
  nSecAll = sec_count(all)
  nSecSoma = sec_count(somatic)
  nSecApical = sec_count(apical)
  nSecBasal = sec_count(basal)
  nSecMyelinated = sec_count(myelinated)
  nSecAxonalOrig = nSecAxonal = sec_count(axonal)

  segCounts = new Vector()
  segCounts.resize(nSecAll)
  nSec = 0
  forsec all {
    segCounts.x[nSec] = nseg
    nSec += 1
  }
}

/*
 * Replace the axon built from the original morphology file with a stub axon
 */
    

proc replace_axon(){ local count, i1, i2, L_target, strenght, taper_scale, terminal_diameter localobj diams

    access axon[0]
    axon[0] i1 = v(0.0001) // used when serializing sections prior to sim start
    axon[1] i2 = v(0.0001) // used when serializing sections prior to sim start
    axon[2] i3 = v(0.0001) // used when serializing sections prior to sim start

    // get rid of the old axon
    forsec axonal{delete_section()}
    execute1("create axon[2]", CellRef)

    // creating diameter profile
    nseg_total = 10
    L_target = 60
    strength = 9.999999999998727e-07
    taper_scale = 10.78960441477696
    terminal_diameter = 0.4534256047206839
    ais_scale = $1
    soma_scale= $2
    diams = new Vector()
    count = 0
    for i=0,nseg_total{
        count = count + 1
        diams.resize(count)
        diams.x[count-1] = strength * exp(-L_target * i / nseg_total / taper_scale) + terminal_diameter * ais_scale
    }

    // assigning diameter to axon
    count = 0
    for i=0,1{
        access axon[i]
        L =  L_target/2
        nseg = nseg_total/2
        for (x) {
            if (x > 0 && x < 1) {
                diam(x) = diams.x[count]
                count = count + 1
            }
        }
        all.append()
        axonal.append()

        if (i == 0) {
            v(0.0001) = i1
        } else {
            v(0.0001) = i2
        }


    }

    soma[0] connect axon[0](0), 1
    axon[0] connect axon[1](0), 1

    // add myelin part
    create myelin[1]
    access myelin{
            L = 1000
            diam = diams.x[count-1]
            nseg = 5
            v(0.0001) = i3
            all.append()
            myelinated.append()
    }
    connect myelin(0), axon[1](1)
}
    



func hash_str() {localobj sf strdef right
  sf = new StringFunctions()

  right = $s1

  n_of_c = sf.len(right)

  hash = 0
  char_int = 0
  for i = 0, n_of_c - 1 {
     sscanf(right, "%c", & char_int)
     hash = (hash * 31 + char_int) % (2 ^ 31 - 1)
     sf.right(right, 1)
  }

  return hash
}

proc re_init_rng() {localobj sf
    strdef full_str, name

    sf = new StringFunctions()

    if(numarg() == 1) {
        // We received a third seed
        channel_seed = $1
        channel_seed_set = 1
    } else {
        channel_seed_set = 0
    }


}


endtemplate cNAC_L23BTC
